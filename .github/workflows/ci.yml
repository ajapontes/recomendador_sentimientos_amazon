name: CI - Build, Test & Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test-project:
    name: Run unit tests (Python ${{ matrix.python-version }} • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]

env:
  HF_HUB_DISABLE_SYMLINKS_WARNING: "1"
  CUDA_VISIBLE_DEVICES: ""
  PYTHONPATH: "${{ github.workspace }}/recomendador_sentimientos_amazon/src"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Show Python and pip versions
        run: |
          python -V
          pip -V

      # --- Dependencias ---
      - name: Prepare CI requirements (exclude CUDA wheels)
        run: |
          awk '!/^(torch|torchvision|torchaudio)==/' requirements.txt > requirements.ci.txt
          echo "requirements.ci.txt:"
          cat requirements.ci.txt

      - name: Install dependencies (project)
        run: |
          pip install -r requirements.ci.txt
          pip install "torch==2.8.0" "torchvision==0.23.0" "torchaudio==2.8.0" --index-url https://download.pytorch.org/whl/cpu
          pip install pytest pytest-cov httpx

      - name: Verify Torch & CUDA availability (CPU expected)
        run: |
          python - << 'PY'
          import torch, sys
          print("Python:", sys.executable)
          print("Torch:", torch.__version__)
          print("CUDA toolkit:", torch.version.cuda)
          print("CUDA available:", torch.cuda.is_available())
          print("Device:", "cuda" if torch.cuda.is_available() else "cpu")
          PY

      # --- Artefactos mínimos ---
      - name: Create minimal test data artifacts
        run: |
          python - << 'PY'
          import os, pandas as pd
          os.makedirs("data/processed", exist_ok=True)

          df = pd.DataFrame({
              "user_id": ["U1","U1","U2","U3","U3","U4"],
              "product_id": ["P1","P2","P2","P3","P4","P1"],
              "rating": [5,4,5,3,5,4],
              "product_title": ["Prod 1","Prod 2","Prod 2","Prod 3","Prod 4","Prod 1"],
          })
          df.to_parquet("data/processed/electronics_sample_100k.parquet", index=False)
          print("Created data/processed/electronics_sample_100k.parquet:", df.shape)
          PY

      # --- Tests + Coverage ---
      - name: Run unit tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}/recomendador_sentimientos_amazon
        run: |
          echo "Using PYTHONPATH=$PYTHONPATH"
          pytest -q --cov=src --cov-report=term-missing --maxfail=1 | tee pytest.log
          coverage xml -o coverage.xml

      # --- Verificación automática ---
      - name: Verify pytest log not empty
        run: |
          if [ ! -s pytest.log ]; then
            echo "❌ pytest.log está vacío: no se ejecutaron tests"
            exit 1
          fi
          echo "✅ pytest.log contiene resultados"

      # --- Guardar artefactos ---
      - name: Upload pytest log
        uses: actions/upload-artifact@v4
        with:
          name: pytest-log
          path: pytest.log

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
